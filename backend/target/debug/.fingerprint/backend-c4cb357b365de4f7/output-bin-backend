{"message":"unused import: `sql_types::Time`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/models.rs","byte_start":25,"byte_end":40,"line_start":1,"line_end":1,"column_start":26,"column_end":41,"is_primary":true,"text":[{"text":"use diesel::{prelude::*, sql_types::Time};","highlight_start":26,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/models.rs","byte_start":23,"byte_end":40,"line_start":1,"line_end":1,"column_start":24,"column_end":41,"is_primary":true,"text":[{"text":"use diesel::{prelude::*, sql_types::Time};","highlight_start":24,"highlight_end":41}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `sql_types::Time`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:1:26\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse diesel::{prelude::*, sql_types::Time};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"the trait bound `NaiveTime: diesel::Queryable<diesel::sql_types::Timestamp, Pg>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models.rs","byte_start":382,"byte_end":388,"line_start":14,"line_end":14,"column_start":20,"column_end":26,"is_primary":true,"text":[{"text":"  pub u_lastlogin: chrono::NaiveTime,","highlight_start":20,"highlight_end":26}],"label":"the trait `diesel::Queryable<diesel::sql_types::Timestamp, Pg>` is not implemented for `NaiveTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `diesel::Queryable<ST, DB>`:\n  <(T0, T1) as diesel::Queryable<(ST0, ST1), __DB>>\n  <(T0, T1) as diesel::Queryable<Record<(ST0, ST1)>, Pg>>\n  <(T0, T1, T2) as diesel::Queryable<(ST0, ST1, ST2), __DB>>\n  <(T0, T1, T2) as diesel::Queryable<Record<(ST0, ST1, ST2)>, Pg>>\n  <(T0, T1, T2, T3) as diesel::Queryable<(ST0, ST1, ST2, ST3), __DB>>\n  <(T0, T1, T2, T3) as diesel::Queryable<Record<(ST0, ST1, ST2, ST3)>, Pg>>\n  <(T0, T1, T2, T3, T4) as diesel::Queryable<(ST0, ST1, ST2, ST3, ST4), __DB>>\n  <(T0, T1, T2, T3, T4) as diesel::Queryable<Record<(ST0, ST1, ST2, ST3, ST4)>, Pg>>\nand 120 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `NaiveTime` to implement `FromSqlRow<diesel::sql_types::Timestamp, Pg>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see issue #48214","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `NaiveTime: diesel::Queryable<diesel::sql_types::Timestamp, Pg>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:14:20\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  pub u_lastlogin: chrono::NaiveTime,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Queryable<diesel::sql_types::Timestamp, Pg>` is not implemented for `NaiveTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Queryable<ST, DB>`:\u001b[0m\n\u001b[0m             <(T0, T1) as diesel::Queryable<(ST0, ST1), __DB>>\u001b[0m\n\u001b[0m             <(T0, T1) as diesel::Queryable<Record<(ST0, ST1)>, Pg>>\u001b[0m\n\u001b[0m             <(T0, T1, T2) as diesel::Queryable<(ST0, ST1, ST2), __DB>>\u001b[0m\n\u001b[0m             <(T0, T1, T2) as diesel::Queryable<Record<(ST0, ST1, ST2)>, Pg>>\u001b[0m\n\u001b[0m             <(T0, T1, T2, T3) as diesel::Queryable<(ST0, ST1, ST2, ST3), __DB>>\u001b[0m\n\u001b[0m             <(T0, T1, T2, T3) as diesel::Queryable<Record<(ST0, ST1, ST2, ST3)>, Pg>>\u001b[0m\n\u001b[0m             <(T0, T1, T2, T3, T4) as diesel::Queryable<(ST0, ST1, ST2, ST3, ST4), __DB>>\u001b[0m\n\u001b[0m             <(T0, T1, T2, T3, T4) as diesel::Queryable<Record<(ST0, ST1, ST2, ST3, ST4)>, Pg>>\u001b[0m\n\u001b[0m           and 120 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `NaiveTime` to implement `FromSqlRow<diesel::sql_types::Timestamp, Pg>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: see issue #48214\u001b[0m\n\n"}
{"message":"the trait bound `NaiveDateTime: FromSql<diesel::sql_types::Timestamp, Pg>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models.rs","byte_start":1147,"byte_end":1153,"line_start":44,"line_end":44,"column_start":17,"column_end":23,"is_primary":true,"text":[{"text":"  pub creatime: Option<chrono::NaiveDateTime>,","highlight_start":17,"highlight_end":23}],"label":"the trait `FromSql<diesel::sql_types::Timestamp, Pg>` is not implemented for `NaiveDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `FromSql<A, DB>`:\n  <(T0, T1) as FromSql<Record<(ST0, ST1)>, Pg>>\n  <(T0, T1, T2) as FromSql<Record<(ST0, ST1, ST2)>, Pg>>\n  <(T0, T1, T2, T3) as FromSql<Record<(ST0, ST1, ST2, ST3)>, Pg>>\n  <(T0, T1, T2, T3, T4) as FromSql<Record<(ST0, ST1, ST2, ST3, ST4)>, Pg>>\n  <(T0, T1, T2, T3, T4, T5) as FromSql<Record<(ST0, ST1, ST2, ST3, ST4, ST5)>, Pg>>\n  <(T0, T1, T2, T3, T4, T5, T6) as FromSql<Record<(ST0, ST1, ST2, ST3, ST4, ST5, ST6)>, Pg>>\n  <(T0, T1, T2, T3, T4, T5, T6, T7) as FromSql<Record<(ST0, ST1, ST2, ST3, ST4, ST5, ST6, ST7)>, Pg>>\n  <(T0, T1, T2, T3, T4, T5, T6, T7, T8) as FromSql<Record<(ST0, ST1, ST2, ST3, ST4, ST5, ST6, ST7, ST8)>, Pg>>\nand 50 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Option<NaiveDateTime>` to implement `FromSql<diesel::sql_types::Nullable<diesel::sql_types::Timestamp>, Pg>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<NaiveDateTime>` to implement `diesel::Queryable<diesel::sql_types::Nullable<diesel::sql_types::Timestamp>, Pg>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<NaiveDateTime>` to implement `FromSqlRow<diesel::sql_types::Nullable<diesel::sql_types::Timestamp>, Pg>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see issue #48214","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `NaiveDateTime: FromSql<diesel::sql_types::Timestamp, Pg>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:44:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  pub creatime: Option<chrono::NaiveDateTime>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `FromSql<diesel::sql_types::Timestamp, Pg>` is not implemented for `NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `FromSql<A, DB>`:\u001b[0m\n\u001b[0m             <(T0, T1) as FromSql<Record<(ST0, ST1)>, Pg>>\u001b[0m\n\u001b[0m             <(T0, T1, T2) as FromSql<Record<(ST0, ST1, ST2)>, Pg>>\u001b[0m\n\u001b[0m             <(T0, T1, T2, T3) as FromSql<Record<(ST0, ST1, ST2, ST3)>, Pg>>\u001b[0m\n\u001b[0m             <(T0, T1, T2, T3, T4) as FromSql<Record<(ST0, ST1, ST2, ST3, ST4)>, Pg>>\u001b[0m\n\u001b[0m             <(T0, T1, T2, T3, T4, T5) as FromSql<Record<(ST0, ST1, ST2, ST3, ST4, ST5)>, Pg>>\u001b[0m\n\u001b[0m             <(T0, T1, T2, T3, T4, T5, T6) as FromSql<Record<(ST0, ST1, ST2, ST3, ST4, ST5, ST6)>, Pg>>\u001b[0m\n\u001b[0m             <(T0, T1, T2, T3, T4, T5, T6, T7) as FromSql<Record<(ST0, ST1, ST2, ST3, ST4, ST5, ST6, ST7)>, Pg>>\u001b[0m\n\u001b[0m             <(T0, T1, T2, T3, T4, T5, T6, T7, T8) as FromSql<Record<(ST0, ST1, ST2, ST3, ST4, ST5, ST6, ST7, ST8)>, Pg>>\u001b[0m\n\u001b[0m           and 50 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<NaiveDateTime>` to implement `FromSql<diesel::sql_types::Nullable<diesel::sql_types::Timestamp>, Pg>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<NaiveDateTime>` to implement `diesel::Queryable<diesel::sql_types::Nullable<diesel::sql_types::Timestamp>, Pg>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<NaiveDateTime>` to implement `FromSqlRow<diesel::sql_types::Nullable<diesel::sql_types::Timestamp>, Pg>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: see issue #48214\u001b[0m\n\n"}
{"message":"aborting due to 2 previous errors; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors; 1 warning emitted\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
